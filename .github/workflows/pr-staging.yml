# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ staging ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checkout the source code
    - name: 'Checkout source code'
      uses: actions/checkout@v3

    # Install Volta to enforce proper node and package manager versions
    - name: 'Install Volta'
      uses: volta-cli/action@v4
      
    # Install salesforce-cli with npm
    - name: 'Install Salesforce Cli'
      run: npm install @salesforce/cli --global

    # Cache node_modules to speed up the process
    - name: 'Restore node_modules cache'
      id: cache-npm
      uses: actions/cache@v3
      with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
              npm-${{ env.cache-name }}-
              npm-

    # Install npm dependencies for Prettier and Jest
    - name: 'Install npm dependencies'
      if: steps.cache-npm.outputs.cache-hit != 'true'
      run: HUSKY=0 npm ci

    # Prettier formatting
    - name: 'Code formatting verification with Prettier'
      run: npm run prettier:verify

    # Lint LWC / Aura
    # - name: 'Lint Lightning Web Components / Aura Components'
    #   run: npm run lint

    # LWC unit tests
    # - name: 'Unit test Lightning Web Components'
    #   run: npm run test:unit:coverage

    # Upload code coverage data
    - name: 'Upload code coverage for LWC to Codecov.io'
      uses: codecov/codecov-action@v3
      with:
          flags: LWC
 # Runs a set of commands using the runners shell
    - name: 'Decrypt file'
      run: openssl rsa -passin pass:${{ secrets.SF_DECRYPTION_KEY }} -in assets/server.pass.key -out server.key
    - name: 'Authorize'
      run: sf org login jwt --username ${{ secrets.USERNAME }} --jwt-key-file server.key --client-id ${{ secrets.CONSUMER_KEY }} --alias github-ci-dev-hub --set-default-dev-hub
    - name: 'Convert Metadata'
      run: sfdx force:source:convert --rootdir=force-app --outputdir=convert
    - name: 'Run Test on Metadata'
      run: sfdx force:mdapi:deploy --deploydir=convert --testlevel=RunLocalTests --checkonly -u hub-org

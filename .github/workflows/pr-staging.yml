# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ staging ]

# Jobs to be executed
jobs:
    # Formatting and linting only runs on human-submitted PRs
    format-lint-lwc-tests:
        runs-on: ubuntu-latest
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3

            # Install Volta to enforce proper node and package manager versions
            - name: 'Install Volta'
              uses: volta-cli/action@v4

            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v3
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: HUSKY=0 npm ci

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify

            # Lint LWC / Aura
            # - name: 'Lint Lightning Web Components / Aura Components'
            #   run: npm run lint

            # LWC unit tests
            # - name: 'Unit test Lightning Web Components'
            #   run: npm run test:unit:coverage

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v3
              with:
                  flags: LWC

    scratch-org-test:
        runs-on: ubuntu-latest
        needs: format-lint-lwc-tests
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              
            # Authenticate dev hub
            - name: 'Decrypt file'
              run: |
                openssl rsa -passin pass:${{ secrets.SF_DECRYPTION_KEY }} -in assets/server.pass.key -out server.key
                ls
                pwd
                sf org login jwt --help
                ls -l /usr/bin/bash
            - name: 'Authorize'
              run: sf org login jwt --username ${{ secrets.USERNAME }} --jwt-key-file /home/runner/work/sfdx-githubci/sfdx-githubci/server.key --client-id ${{ secrets.CONSUMER_KEY }} --alias github-ci-dev-hub --set-default-dev-hub
    
            # Store secret for dev hub
            # - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
            #   shell: bash
            #   run: |
            #       echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
            #       secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
            #       if [ $secretFileSize == 1 ]; then
            #           echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
            #           exit 1;
            #       fi

            # Authenticate dev hub
            # - name: 'Authenticate Dev Hub'
            #   run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Create scratch org
            - name: 'Create scratch org'
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: sf project deploy start

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: sf apex test run -c -r human -d ./tests/apex -w 20

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v3
              with:
                  flags: Apex

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sf org delete scratch -p -o scratch-org
